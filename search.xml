<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>小米手机刷机记录-以小米6为例</title>
    <url>/2020/08/26/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95-%E4%BB%A5%E5%B0%8F%E7%B1%B36%E4%B8%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="小米手机刷机记录-以小米6为例"><a href="#小米手机刷机记录-以小米6为例" class="headerlink" title="小米手机刷机记录-以小米6为例"></a>小米手机刷机记录-以小米6为例</h1><p>本文记录了2020年初给备用机小米6刷机的过程，并不一定是最可靠、最安全的方法。</p>
<p>刷机有风险！刷前需备份！</p>
<a id="more"></a>

<h2 id="一、解锁BootLoader"><a href="#一、解锁BootLoader" class="headerlink" title="一、解锁BootLoader"></a>一、解锁BootLoader</h2><p>这是刷机的前提，BL锁的存在会限制用户刷第三方recovery和ROM。  </p>
<p><a href="http://www.miui.com/unlock/index.html">小米解锁官网</a></p>
<p>按网站介绍的流程解锁即可。  </p>
<p>注：小米手机连接电脑时，使用的电脑接口似乎必须是USB 2.0协议的，否则解锁程序可能会识别不出来，导致解锁失败。</p>
<h2 id="二、刷入第三方recovery"><a href="#二、刷入第三方recovery" class="headerlink" title="二、刷入第三方recovery"></a>二、刷入第三方recovery</h2><h3 id="方法1-fastboot模式刷入（无需root，需要电脑）"><a href="#方法1-fastboot模式刷入（无需root，需要电脑）" class="headerlink" title="方法1.fastboot模式刷入（无需root，需要电脑）"></a>方法1.fastboot模式刷入（无需root，需要电脑）</h3><p>注：电脑以win10为例。</p>
<p>1.电脑上下载要安装的第三方recovery（rec）文件</p>
<p><a href="https://twrp.me/Devices">TWRP官网</a> 中搜索下载，下载下来的文件后缀为.img；<br>一些第三方ROM的官网也会主动提供；<br>Github上也有，<a href="https://github.com/xiaomi-msm8998/twrp_device_xiaomi_sagit/releases/tag/3.3.1-20191204">这个适用于安卓10的twrp</a></p>
<p>2.电脑上下载SDK平台工具</p>
<p><a href="https://developer.android.google.cn/studio/releases/platform-tools">SDK网站</a><br>下载，解压放在全英文目录，并添加其路径到系统变量；手机开启adb调试。</p>
<p>3.在手机上长按音量下键和电源键，进入fastboot模式，如图，并连接电脑（似乎也需要USB 2.0口）。</p>
<p>4.打开解压后的platform-tools文件夹，按“左shift”并右击空白处，在弹出的菜单中点击“在此处打开 Powershell窗口”。<br>在弹出的窗口中输入命令“./fastboot devices”，确认手机连上电脑。<br>再输入“./fastboot flash recovery <recovery_filename>.img(即准备好的rec文件的路径)”。</p>
<h3 id="方法2-使用-twrp-app刷入（须root，不需电脑）"><a href="#方法2-使用-twrp-app刷入（须root，不需电脑）" class="headerlink" title="方法2.使用 twrp app刷入（须root，不需电脑）"></a>方法2.使用 twrp app刷入（须root，不需电脑）</h3><p>1.获取root权限</p>
<p>去申请MIUI11开发版或者去<a href="http://www.miui.com/download.html">MIUI网站</a> 下以前的开发版，下载后在手机上安装（在设置-系统更新界面连点MIUI图标数次，再点右上角菜单键，选刷入下好的压缩包），开发版自带root（似乎要在安全中心开启）。</p>
<p>2.安装TWRP app</p>
<p>在Google Play或酷安下载“Official TWRP App”并安装，授予其root权限，在其中搜对应机型的rec并刷入。</p>
<h2 id="三、进入rec模式"><a href="#三、进入rec模式" class="headerlink" title="三、进入rec模式"></a>三、进入rec模式</h2><p>准备：在电脑上下好第三方刷机包，文件后缀为.zip；另外，可下好gapps包（使装的第三方系统具有Google框架及一些Google app），Magisk包（管理手机root权限）。<br>长按手机电源上键和电源键，进入recovery模式。<br>点击“清除”，点击“格式化Data”，按提示操作并重启再次进入rec模式。<br>点击“清除”，点击“高级清除”，选择<em>Dalvik/ART Cache</em>、<em>system</em>、<em>Data</em>以及<em>Cache</em>，并确认清除。<br>把刷机包通过数据线从电脑传到手机上，点击rec主界面的安装，选中该包并刷入；同理，gapps和magisk也是一样的刷法。最后重启进系统即可。</p>
<h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><p>1.gapps（谷歌框架、商店等的合集）</p>
<p><a href="https://sourceforge.net/projects/opengapps/files/arm64/">open_gapps</a></p>
<p>2.Magisk</p>
<p><a href="https://github.com/topjohnwu/Magisk/releases">Magisk</a></p>
<p>Magisk可能会刷入失败，此时，进入手机系统，到酷安安装Magisk Manager app，进入，选择安装Magisk，再点“选择并修补一个文件”，所选的文件是，所用的刷机包解压后其中的boot.img文件。修补后会出现一个magisk_patched.img文件，进入rec模式，选“安装”，选“刷入镜像”，选择该文件，然后选Boot分区刷入即可。</p>
<p>3.底包/固件（Firmware）</p>
<p>一般，从最新的官方MIUI系统刷第三方包不用管，如果后续官方系统有更新，可在这个网站查看最新底包。  </p>
<p><a href="https://xiaomifirmwareupdater.com/">xiaomifirmwareupdater</a></p>
<p>4.后续更新系统的方法</p>
<p>一种是该第三方系统支持自动更新，那很简单，在设置里点点就好了（比如Lineageos）；另一种是需要自己去查看有无最新的包，然后在按之前的方法刷入即可（进rec清除时简单清除即可）。</p>
<p>5.一些第三方ROM网站</p>
<p><a href="https://download.lineageos.org/">Lineageos</a><br><a href="https://download.pixelexperience.org/">Pixel Experience</a><br><a href="https://sourceforge.net/projects/havoc-os/files/">Havoc-OS</a><br><a href="https://dwnld.aicp-rom.com/">AICP-ROM</a><br><a href="https://www.resurrectionremix.com/">Resurrection Remix OS</a><br><a href="https://sagit.sbwml.net/">sbwml (xiaomi 6)</a></p>
<h2 id="五、（补充）刷回MIUI"><a href="#五、（补充）刷回MIUI" class="headerlink" title="五、（补充）刷回MIUI"></a>五、（补充）刷回MIUI</h2><p>使用过程中，发现第三方ROM还需要自己去配置、去美化、去折腾才能达到好用的效果，但是又没有这么多时间（懒），于是几个月后又刷回了MIUI。</p>
<p><a href="http://www.miui.com/shuaji-393.html">官方线刷教程</a></p>
<p>刷机工具和线刷包都在里面下载。</p>
<p>注意：在这步，手机与电脑连接时也必须是USB 2.0的接口（我用了type-c扩展坞上最低级的USB 3.0口也成功了）。</p>
<p>PS：在搜索资料过程中发现，有人开发了第三方的刷机工具：<a href="https://lsdy.top/gjzs">搞机助手</a>，这个似乎可以使用更高级别的USB接口（未亲自试验过，不做评价）。</p>
]]></content>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的搭建、使用、错误解决（持续更新中）</title>
    <url>/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>本文记录了在win10平台下利用Hexo和Github搭建个人博客的过程。</p>
<a id="more"></a>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考了少数派的一篇文章，写得非常棒。本文是在此基础上总结和补充。</p>
<p><a href="https://sspai.com/post/59337">记录生活，分享点滴：通过 Hexo 搭建与使用个人博客</a></p>
<h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p><a href="https://git-scm.com/">Git</a>是一个免费的、开源的分布式版本控制系统.</p>
<h3 id="2-Github账户"><a href="#2-Github账户" class="headerlink" title="2.Github账户"></a>2.Github账户</h3><p><a href="https://www.github.com/">Github</a>是一个代码托管平台。</p>
<ol>
<li>注册账户</li>
<li>（推荐）配置SSH：点右上角头像 - Settings - SSH and GPG Keys - SSH keys。具体配置方法可参考上面提到参考文章。</li>
</ol>
<h3 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h3><p><a href="https://nodejs.org/zh-cn/">Node.js</a>是一个基于 Chrome V8 引擎的 JavaScript 运行环境。它包含 npm 包管理器。</p>
<h3 id="4-（推荐）安装Typora"><a href="#4-（推荐）安装Typora" class="headerlink" title="4.（推荐）安装Typora"></a>4.（推荐）安装Typora</h3><p><a href="https://www.typora.io/">Typora</a>一个优美简洁的Markdown文本编辑器。</p>
<h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架，且是静态的，可以搭建在<a href="https://pages.github.com/">Github Pages</a>（一个基于Github仓库所建立的个人网站）上。</p>
<p>安装要使用命令行工具，<strong>CMD</strong>或<strong>Git Bash</strong>都可以。</p>
<ol>
<li><p>打开命令行工具，如windows自带的CMD。</p>
</li>
<li><p>输入<code>npm install hexo-cli -g</code>，如下。</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-16_17-09-47.png" class="" title="Snipaste_2020-08-16_17-09-47">
</li>
<li><p>输入<code>hexo init blog</code>，<strong>其中的“blog”可替换为任意名字</strong>。执行后会在<code>C:\Users\xxx（你的系统用户名）</code>目录下创建一个文件夹，文件夹名就是刚才自定义的名字，本文以“blog”为例。</p>
</li>
</ol>
<p>   到了这步，其实本地的博客已经基本配置好了，下面把它部署到Github上。</p>
<ol>
<li><p>打开Github，点右上角“+”号 - new repository，以新建一个仓库。在新打开的页面填写Repository name，为：<code>xxx（你的Github用户名）.github.io</code>，仓库类型保持Public，点Create repository即可创建完成。</p>
</li>
<li><p>接着，setup方式选SSH，复制右边方框里那串文字，如下图。</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20200817105728165.png" class="" title="image-20200817105728165">
</li>
<li><p>到<code>C:\用户\xxx（你的系统用户名）\blog</code>文件夹中修改 名为_config.yml的文件，这是Hexo的配置文件。</p>
<ul>
<li>拉到最下面，找到”deploy”：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: &#39;&#39;</span><br></pre></td></tr></table></figure>

<p>更改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:BlackWhiteBlue&#x2F;BlackWhiteBlue.github.io.git（即第5步复制的内容）</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li>在前面找到”url1”：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: http:&#x2F;&#x2F;yoursite.com</span><br></pre></td></tr></table></figure>

<p>更改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: https:&#x2F;&#x2F;BlackWhiteBlue.github.io（即xxx（你的Github用户名）.github.io）</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开CMD，输入<code>cd blog</code>，再输入<code>npm install hexo-deployer-git --save</code>。</p>
</li>
<li><p>输入<code>hexo deploy</code>，就部署完成了。</p>
<p>之后可以到对应的Github仓库中看到上传的文件，顺便看看上传时间对不对。</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-16_18-46-28.png" class="" title="Snipaste_2020-08-16_18-46-28">

<p>最后，打开博客网站<code>xxx（Github用户名）.github.io</code>看看效果，如果打不开可以等一会。</p>
</li>
</ol>
<h2 id="三、使用Hexo"><a href="#三、使用Hexo" class="headerlink" title="三、使用Hexo"></a>三、使用Hexo</h2><h3 id="1-写文章"><a href="#1-写文章" class="headerlink" title="1.写文章"></a>1.写文章</h3><ul>
<li><p>新建一篇文章：</p>
<p><code>hexo new xxx（你的文章名）</code></p>
<p>这样，在<code>source\_posts</code>中会新建一篇Markdown(.md)文章，可以打开并编辑它。</p>
<p>也可以新建草稿：</p>
<p><code>hexo new draft xxx</code></p>
<p>这样，在<code>source\_posts</code>中会新建一篇文章；要将其改为发布状态，则用命令：<code>hexo publish xxx</code></p>
</li>
<li><p>（可选）建立一个临时的本地服务器，使你可以通过网址<code>http://localhost:4000</code>访问博客：</p>
<p><code>hexo server</code></p>
<p>按<code>ctrl+c</code>可终止。</p>
</li>
<li><p>发布文章到博客网站上：</p>
<p>先<code>hexo clean</code>；</p>
<p>（再<code>hexo g</code>，即<code>hexo generate</code>）；</p>
<p>后<code>hexo d，</code>即<code>hexo deploy</code>。</p>
</li>
</ul>
<h3 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2.安装主题"></a>2.安装主题</h3><p>官网有<a href="https://hexo.io/themes/">主题</a>专栏。选一款喜欢的主题，点它的名字即可进入其Github界面，里面一般都会有安装说明。</p>
<p>其实就是在blog目录下输一行命令：<code>git clone https://github.com/xx（用户名）/xxx（主题名）.git themes/xxx（主题名）</code>；</p>
<p>然后到_config.yml文件中找到”theme”并修改：<code>theme: xxx（主题名，默认为landscape）</code>。</p>
<p>推荐：</p>
<p>我目前用的主题是<a href="https://github.com/zhwangart/hexo-theme-ocean">Ocean</a>，看起来很棒；有<a href="https://zhwangart.github.io/2018/11/30/Ocean/">中文文档</a>，关于安装和使用的说明很详细了。</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/hexo-theme-ocean.jpg" class="" title="hexo-theme-ocean">

<h3 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3.安装插件"></a>3.安装插件</h3><p>官网有<a href="https://hexo.io/plugins/">插件</a>专栏。</p>
<p>安装：在blog目录下输：<code>npm install xxx（插件名） --save</code>。</p>
<p>推荐：</p>
<p><a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a>：用于制作搜索界面</p>
<p><a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a>：用于生成RSS链接<code>xxx（博客网站名）/atom.xml</code></p>
<p><a href="https://github.com/cocowool/hexo-image-link">hexo-image-link</a>：使本地图片能够在博客文章中显示出来</p>
<p>…</p>
<h3 id="4-修改配置文件-config-yml"><a href="#4-修改配置文件-config-yml" class="headerlink" title="4.修改配置文件_config.yml"></a>4.修改配置文件_config.yml</h3><p>该文件在<code>C:\用户\xxx（你的系统用户名）\blog</code>目录下，可以用于配置博客。</p>
<h2 id="四、错误汇总"><a href="#四、错误汇总" class="headerlink" title="四、错误汇总"></a>四、错误汇总</h2><p>这里汇总一下博客搭建和使用过程中遇到的错误和问题。</p>
<h3 id="1-YAMLException-can-not-read-a-block-mapping-entry-a-multiple-key-may-not-be-an-implicit-key-at-line-xx-column-xx"><a href="#1-YAMLException-can-not-read-a-block-mapping-entry-a-multiple-key-may-not-be-an-implicit-key-at-line-xx-column-xx" class="headerlink" title="1.YAMLException: can not read a block mapping entry; a multiple key may not be an implicit key at line xx, column xx"></a>1.YAMLException: can not read a block mapping entry; a multiple key may not be an implicit key at line xx, column xx</h3><img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-16_18-43-00.png" class="" title="Snipaste_2020-08-16_18-43-00">

<p>执行<code>hexo deploy</code>时报错。从图上第二行可以看出，108行有问题，那么就去_config.yml文件中找到这一行，然后发现是这一行中的冒号<code>:</code>后面忘加空格了。</p>
<p><strong>解决方法</strong>：冒号后面补上空格。记住：该文件中所有的<strong>冒号后面都要加个空格</strong>。</p>
<h3 id="2-网站上无法显示出引用的本地图片"><a href="#2-网站上无法显示出引用的本地图片" class="headerlink" title="2.网站上无法显示出引用的本地图片"></a>2.网站上无法显示出引用的本地图片</h3><img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-18_08-51-01.png" class="" title="Snipaste_2020-08-18_08-51-01">

<p><strong>解决方法</strong>：</p>
<p>首先，修改_config.yml文件，把其中的“post_asset_folder”设为true：<code>post_asset_folder: true</code>。这样，每次<code>hexo new 一篇新文章</code>的时候，不仅会在<code>source\_posts</code>中创建 <em>一篇新文章.md</em> 文件，还会同时创建同名文件夹。可以把要用到的图片先复制到这个文件夹中，再插入到文章里。当然，对于在设置<code>post_asset_folder</code>之前就创建的文章，自己手动建一个同名文件夹即可。</p>
<p>接着，安装<a href="https://github.com/cocowool/hexo-image-link">hexo-image-link</a>插件：<code>npm install hexo-image-link --save</code>。</p>
<p><strong>遗留问题</strong>：我发现用Typora缩放插入的图片时，markdown语法会发生改变，如下图。这种情况下这个插件似乎就没有用了，这种图片还是显示不出来。所以我只好暂时不用缩放功能。</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-18_14-22-00.png" class="" title="Snipaste_2020-08-18_14-22-00">

<p>正常的语法格式应为：</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-18_14-21-42.png" class="" title="Snipaste_2020-08-18_14-21-42">



<h3 id="3-err-TypeError-ERR-INVALID-URL-Invalid-URL-xxx（如localhost等）"><a href="#3-err-TypeError-ERR-INVALID-URL-Invalid-URL-xxx（如localhost等）" class="headerlink" title="3. err: TypeError [ERR_INVALID_URL]: Invalid URL: xxx（如localhost等）"></a>3. err: TypeError [ERR_INVALID_URL]: Invalid URL: xxx（如localhost等）</h3><img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-18_11-16-44.png" class="" title="Snipaste_2020-08-18_11-16-44">

<p>使用<code>hexo server</code>或<code>hexo generate</code>时出现了该问题，可以看到，错误代码上说<code>Invalid URL：http://localhost:4000访问博客：</code>。在网上找了找解决办法，这篇<a href="https://blog.csdn.net/qq_45841239/article/details/107725247">CSDN博客</a>解决了我的问题。原来是文章中<strong>不能出现localhost、127.0.0.1之类的本机地址</strong>，我看了一下我的文字，里面确实提到了这个地址，如下图：</p>
<img src="/2020/08/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Snipaste_2020-08-18_11-33-34.png" class="" title="Snipaste_2020-08-18_11-33-34">

<p><strong>解决方法</strong>：把这个地址删掉，或者转为行内代码。</p>
<p>PS：一开始我以为是我刚刚新安装的插件的问题，把它的文件夹删了也没用，甚至差点想重装hexo了😂。这个故事告诉我，要耐心，要理解错误代码的含义。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
